//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Global/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""da00cdf8-e51f-4bf1-8587-3c5a2c0f5837"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Button"",
                    ""id"": ""365b9b24-0465-4fbb-b623-9de853745e8b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Vertical"",
                    ""type"": ""Button"",
                    ""id"": ""8c9db587-2fdb-47af-8edb-f618e32d940b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""9624e12e-a6e1-468d-a9f4-bd6573ce3586"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Base Keyborad"",
                    ""id"": ""46152da7-3565-4026-9763-26af8ec90540"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""52292886-dcec-4d5a-a8e4-41c898222e23"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""cac56abd-fb03-4ba9-96bb-937ece099fab"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Base Keyboard"",
                    ""id"": ""0ff60346-1716-4540-97bd-9ca42de286d1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e59b6fe0-dd66-4dc7-9594-c3483d3eda49"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c452bba2-c1ba-468b-8a87-eadbcfcca1e8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""df5ee037-d621-441d-9465-aa423ec50094"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Combat"",
            ""id"": ""5b46c8df-1ccf-419c-a3d9-8edffd1e8cb5"",
            ""actions"": [
                {
                    ""name"": ""Atk"",
                    ""type"": ""Button"",
                    ""id"": ""a7ef026d-d759-4beb-941f-f6eda643cd8e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpAtk"",
                    ""type"": ""Button"",
                    ""id"": ""7d70cb10-b329-41c0-85c3-45198484ee44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pose"",
                    ""type"": ""Button"",
                    ""id"": ""15ff9de6-cfc7-4ab4-b7b2-e6ef8771b825"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Summon"",
                    ""type"": ""Button"",
                    ""id"": ""5a3d8aa2-6a2a-4991-ba6e-9b9195eea642"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""bcd543b3-b25d-42d3-bffb-be084102dd90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b3607f66-7501-4d6b-b875-daa144de8aa7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Roblox"",
                    ""action"": ""Atk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dae4401c-965d-4fe6-aa7f-62686a3bc97a"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Roblox"",
                    ""action"": ""SpAtk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb39f033-4292-452d-b701-285f47b5975e"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b9ab243-8e47-4575-b79b-dc231b9f080c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Summon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7ef6bb7-5c77-4d73-9ca7-4d4651c029b1"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Other"",
            ""id"": ""465e00c9-83d3-46ea-8cd0-b75e4a1c3cd8"",
            ""actions"": [
                {
                    ""name"": ""MousePostition"",
                    ""type"": ""Value"",
                    ""id"": ""166c477f-22ae-444e-8a58-5c05b23b85cc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Focus"",
                    ""type"": ""Button"",
                    ""id"": ""277cbe00-3da3-4f6c-a837-fdcc59e328fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""479979a1-dcdc-4b3d-abdd-cee38d35da56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Wheel"",
                    ""type"": ""Button"",
                    ""id"": ""c6d6ff82-6d0e-4a3f-9926-5c9ee99943f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b6496c5f-7cef-4939-a4a8-7141ca7c663e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePostition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b77be242-801a-4ebb-8a0b-d63e70e65c1a"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Focus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8ae8ba6-eb8e-428e-910c-dd7efe1f4b77"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3342e70d-53d8-463e-9545-56545f00eed5"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Wheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Roblox"",
            ""bindingGroup"": ""Roblox"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Base"",
            ""bindingGroup"": ""Base"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Horizontal = m_Movement.FindAction("Horizontal", throwIfNotFound: true);
        m_Movement_Vertical = m_Movement.FindAction("Vertical", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_Atk = m_Combat.FindAction("Atk", throwIfNotFound: true);
        m_Combat_SpAtk = m_Combat.FindAction("SpAtk", throwIfNotFound: true);
        m_Combat_Pose = m_Combat.FindAction("Pose", throwIfNotFound: true);
        m_Combat_Summon = m_Combat.FindAction("Summon", throwIfNotFound: true);
        m_Combat_Dash = m_Combat.FindAction("Dash", throwIfNotFound: true);
        // Other
        m_Other = asset.FindActionMap("Other", throwIfNotFound: true);
        m_Other_MousePostition = m_Other.FindAction("MousePostition", throwIfNotFound: true);
        m_Other_Focus = m_Other.FindAction("Focus", throwIfNotFound: true);
        m_Other_Pause = m_Other.FindAction("Pause", throwIfNotFound: true);
        m_Other_Wheel = m_Other.FindAction("Wheel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Horizontal;
    private readonly InputAction m_Movement_Vertical;
    private readonly InputAction m_Movement_Jump;
    public struct MovementActions
    {
        private @PlayerInput m_Wrapper;
        public MovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Horizontal => m_Wrapper.m_Movement_Horizontal;
        public InputAction @Vertical => m_Wrapper.m_Movement_Vertical;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Horizontal.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnHorizontal;
                @Horizontal.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnHorizontal;
                @Horizontal.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnHorizontal;
                @Vertical.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnVertical;
                @Vertical.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnVertical;
                @Vertical.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnVertical;
                @Jump.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Horizontal.started += instance.OnHorizontal;
                @Horizontal.performed += instance.OnHorizontal;
                @Horizontal.canceled += instance.OnHorizontal;
                @Vertical.started += instance.OnVertical;
                @Vertical.performed += instance.OnVertical;
                @Vertical.canceled += instance.OnVertical;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Combat
    private readonly InputActionMap m_Combat;
    private ICombatActions m_CombatActionsCallbackInterface;
    private readonly InputAction m_Combat_Atk;
    private readonly InputAction m_Combat_SpAtk;
    private readonly InputAction m_Combat_Pose;
    private readonly InputAction m_Combat_Summon;
    private readonly InputAction m_Combat_Dash;
    public struct CombatActions
    {
        private @PlayerInput m_Wrapper;
        public CombatActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Atk => m_Wrapper.m_Combat_Atk;
        public InputAction @SpAtk => m_Wrapper.m_Combat_SpAtk;
        public InputAction @Pose => m_Wrapper.m_Combat_Pose;
        public InputAction @Summon => m_Wrapper.m_Combat_Summon;
        public InputAction @Dash => m_Wrapper.m_Combat_Dash;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void SetCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterface != null)
            {
                @Atk.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnAtk;
                @Atk.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnAtk;
                @Atk.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnAtk;
                @SpAtk.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnSpAtk;
                @SpAtk.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnSpAtk;
                @SpAtk.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnSpAtk;
                @Pose.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnPose;
                @Pose.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnPose;
                @Pose.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnPose;
                @Summon.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnSummon;
                @Summon.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnSummon;
                @Summon.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnSummon;
                @Dash.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnDash;
            }
            m_Wrapper.m_CombatActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Atk.started += instance.OnAtk;
                @Atk.performed += instance.OnAtk;
                @Atk.canceled += instance.OnAtk;
                @SpAtk.started += instance.OnSpAtk;
                @SpAtk.performed += instance.OnSpAtk;
                @SpAtk.canceled += instance.OnSpAtk;
                @Pose.started += instance.OnPose;
                @Pose.performed += instance.OnPose;
                @Pose.canceled += instance.OnPose;
                @Summon.started += instance.OnSummon;
                @Summon.performed += instance.OnSummon;
                @Summon.canceled += instance.OnSummon;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
            }
        }
    }
    public CombatActions @Combat => new CombatActions(this);

    // Other
    private readonly InputActionMap m_Other;
    private IOtherActions m_OtherActionsCallbackInterface;
    private readonly InputAction m_Other_MousePostition;
    private readonly InputAction m_Other_Focus;
    private readonly InputAction m_Other_Pause;
    private readonly InputAction m_Other_Wheel;
    public struct OtherActions
    {
        private @PlayerInput m_Wrapper;
        public OtherActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePostition => m_Wrapper.m_Other_MousePostition;
        public InputAction @Focus => m_Wrapper.m_Other_Focus;
        public InputAction @Pause => m_Wrapper.m_Other_Pause;
        public InputAction @Wheel => m_Wrapper.m_Other_Wheel;
        public InputActionMap Get() { return m_Wrapper.m_Other; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OtherActions set) { return set.Get(); }
        public void SetCallbacks(IOtherActions instance)
        {
            if (m_Wrapper.m_OtherActionsCallbackInterface != null)
            {
                @MousePostition.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnMousePostition;
                @MousePostition.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnMousePostition;
                @MousePostition.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnMousePostition;
                @Focus.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnFocus;
                @Focus.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnFocus;
                @Focus.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnFocus;
                @Pause.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnPause;
                @Wheel.started -= m_Wrapper.m_OtherActionsCallbackInterface.OnWheel;
                @Wheel.performed -= m_Wrapper.m_OtherActionsCallbackInterface.OnWheel;
                @Wheel.canceled -= m_Wrapper.m_OtherActionsCallbackInterface.OnWheel;
            }
            m_Wrapper.m_OtherActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MousePostition.started += instance.OnMousePostition;
                @MousePostition.performed += instance.OnMousePostition;
                @MousePostition.canceled += instance.OnMousePostition;
                @Focus.started += instance.OnFocus;
                @Focus.performed += instance.OnFocus;
                @Focus.canceled += instance.OnFocus;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Wheel.started += instance.OnWheel;
                @Wheel.performed += instance.OnWheel;
                @Wheel.canceled += instance.OnWheel;
            }
        }
    }
    public OtherActions @Other => new OtherActions(this);
    private int m_RobloxSchemeIndex = -1;
    public InputControlScheme RobloxScheme
    {
        get
        {
            if (m_RobloxSchemeIndex == -1) m_RobloxSchemeIndex = asset.FindControlSchemeIndex("Roblox");
            return asset.controlSchemes[m_RobloxSchemeIndex];
        }
    }
    private int m_BaseSchemeIndex = -1;
    public InputControlScheme BaseScheme
    {
        get
        {
            if (m_BaseSchemeIndex == -1) m_BaseSchemeIndex = asset.FindControlSchemeIndex("Base");
            return asset.controlSchemes[m_BaseSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnHorizontal(InputAction.CallbackContext context);
        void OnVertical(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface ICombatActions
    {
        void OnAtk(InputAction.CallbackContext context);
        void OnSpAtk(InputAction.CallbackContext context);
        void OnPose(InputAction.CallbackContext context);
        void OnSummon(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IOtherActions
    {
        void OnMousePostition(InputAction.CallbackContext context);
        void OnFocus(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnWheel(InputAction.CallbackContext context);
    }
}
